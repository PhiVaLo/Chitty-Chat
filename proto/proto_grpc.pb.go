// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Publish_AskForPublish_FullMethodName = "/proto.Publish/AskForPublish"
	Publish_AskToJoin_FullMethodName     = "/proto.Publish/AskToJoin"
	Publish_AskToLeave_FullMethodName    = "/proto.Publish/AskToLeave"
)

// PublishClient is the client API for Publish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishClient interface {
	AskForPublish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AskToJoin(ctx context.Context, in *JoinOrLeaveMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AskToLeave(ctx context.Context, in *JoinOrLeaveMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type publishClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishClient(cc grpc.ClientConnInterface) PublishClient {
	return &publishClient{cc}
}

func (c *publishClient) AskForPublish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Publish_AskForPublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishClient) AskToJoin(ctx context.Context, in *JoinOrLeaveMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Publish_AskToJoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishClient) AskToLeave(ctx context.Context, in *JoinOrLeaveMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Publish_AskToLeave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishServer is the server API for Publish service.
// All implementations must embed UnimplementedPublishServer
// for forward compatibility
type PublishServer interface {
	AskForPublish(context.Context, *PublishMessage) (*emptypb.Empty, error)
	AskToJoin(context.Context, *JoinOrLeaveMessage) (*emptypb.Empty, error)
	AskToLeave(context.Context, *JoinOrLeaveMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedPublishServer()
}

// UnimplementedPublishServer must be embedded to have forward compatible implementations.
type UnimplementedPublishServer struct {
}

func (UnimplementedPublishServer) AskForPublish(context.Context, *PublishMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForPublish not implemented")
}
func (UnimplementedPublishServer) AskToJoin(context.Context, *JoinOrLeaveMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskToJoin not implemented")
}
func (UnimplementedPublishServer) AskToLeave(context.Context, *JoinOrLeaveMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskToLeave not implemented")
}
func (UnimplementedPublishServer) mustEmbedUnimplementedPublishServer() {}

// UnsafePublishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishServer will
// result in compilation errors.
type UnsafePublishServer interface {
	mustEmbedUnimplementedPublishServer()
}

func RegisterPublishServer(s grpc.ServiceRegistrar, srv PublishServer) {
	s.RegisterService(&Publish_ServiceDesc, srv)
}

func _Publish_AskForPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishServer).AskForPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Publish_AskForPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishServer).AskForPublish(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publish_AskToJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOrLeaveMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishServer).AskToJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Publish_AskToJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishServer).AskToJoin(ctx, req.(*JoinOrLeaveMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publish_AskToLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOrLeaveMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishServer).AskToLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Publish_AskToLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishServer).AskToLeave(ctx, req.(*JoinOrLeaveMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Publish_ServiceDesc is the grpc.ServiceDesc for Publish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Publish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Publish",
	HandlerType: (*PublishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskForPublish",
			Handler:    _Publish_AskForPublish_Handler,
		},
		{
			MethodName: "AskToJoin",
			Handler:    _Publish_AskToJoin_Handler,
		},
		{
			MethodName: "AskToLeave",
			Handler:    _Publish_AskToLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}

const (
	Broadcast_AskForMessageBroadcast_FullMethodName = "/proto.Broadcast/AskForMessageBroadcast"
	Broadcast_AskForJoinBroadcast_FullMethodName    = "/proto.Broadcast/AskForJoinBroadcast"
	Broadcast_AskForLeaveBroadcast_FullMethodName   = "/proto.Broadcast/AskForLeaveBroadcast"
)

// BroadcastClient is the client API for Broadcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastClient interface {
	AskForMessageBroadcast(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AskForJoinBroadcast(ctx context.Context, in *JoinOrLeaveMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AskForLeaveBroadcast(ctx context.Context, in *JoinOrLeaveMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type broadcastClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastClient(cc grpc.ClientConnInterface) BroadcastClient {
	return &broadcastClient{cc}
}

func (c *broadcastClient) AskForMessageBroadcast(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Broadcast_AskForMessageBroadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) AskForJoinBroadcast(ctx context.Context, in *JoinOrLeaveMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Broadcast_AskForJoinBroadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastClient) AskForLeaveBroadcast(ctx context.Context, in *JoinOrLeaveMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Broadcast_AskForLeaveBroadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcastServer is the server API for Broadcast service.
// All implementations must embed UnimplementedBroadcastServer
// for forward compatibility
type BroadcastServer interface {
	AskForMessageBroadcast(context.Context, *PublishMessage) (*emptypb.Empty, error)
	AskForJoinBroadcast(context.Context, *JoinOrLeaveMessage) (*emptypb.Empty, error)
	AskForLeaveBroadcast(context.Context, *JoinOrLeaveMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedBroadcastServer()
}

// UnimplementedBroadcastServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastServer struct {
}

func (UnimplementedBroadcastServer) AskForMessageBroadcast(context.Context, *PublishMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForMessageBroadcast not implemented")
}
func (UnimplementedBroadcastServer) AskForJoinBroadcast(context.Context, *JoinOrLeaveMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForJoinBroadcast not implemented")
}
func (UnimplementedBroadcastServer) AskForLeaveBroadcast(context.Context, *JoinOrLeaveMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForLeaveBroadcast not implemented")
}
func (UnimplementedBroadcastServer) mustEmbedUnimplementedBroadcastServer() {}

// UnsafeBroadcastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServer will
// result in compilation errors.
type UnsafeBroadcastServer interface {
	mustEmbedUnimplementedBroadcastServer()
}

func RegisterBroadcastServer(s grpc.ServiceRegistrar, srv BroadcastServer) {
	s.RegisterService(&Broadcast_ServiceDesc, srv)
}

func _Broadcast_AskForMessageBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).AskForMessageBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcast_AskForMessageBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).AskForMessageBroadcast(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_AskForJoinBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOrLeaveMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).AskForJoinBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcast_AskForJoinBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).AskForJoinBroadcast(ctx, req.(*JoinOrLeaveMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broadcast_AskForLeaveBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOrLeaveMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServer).AskForLeaveBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broadcast_AskForLeaveBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServer).AskForLeaveBroadcast(ctx, req.(*JoinOrLeaveMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Broadcast_ServiceDesc is the grpc.ServiceDesc for Broadcast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broadcast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Broadcast",
	HandlerType: (*BroadcastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskForMessageBroadcast",
			Handler:    _Broadcast_AskForMessageBroadcast_Handler,
		},
		{
			MethodName: "AskForJoinBroadcast",
			Handler:    _Broadcast_AskForJoinBroadcast_Handler,
		},
		{
			MethodName: "AskForLeaveBroadcast",
			Handler:    _Broadcast_AskForLeaveBroadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
