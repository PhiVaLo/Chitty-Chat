// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Database_AskForBid_FullMethodName            = "/proto.Database/AskForBid"
	Database_AskForResult_FullMethodName         = "/proto.Database/AskForResult"
	Database_AskForCorrespondance_FullMethodName = "/proto.Database/AskForCorrespondance"
)

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	AskForBid(ctx context.Context, in *BidMessage, opts ...grpc.CallOption) (*AcknowledgementMessage, error)
	AskForResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResultMessage, error)
	AskForCorrespondance(ctx context.Context, in *AuctionInfoMessage, opts ...grpc.CallOption) (*AuctionInfoMessage, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) AskForBid(ctx context.Context, in *BidMessage, opts ...grpc.CallOption) (*AcknowledgementMessage, error) {
	out := new(AcknowledgementMessage)
	err := c.cc.Invoke(ctx, Database_AskForBid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) AskForResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResultMessage, error) {
	out := new(ResultMessage)
	err := c.cc.Invoke(ctx, Database_AskForResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) AskForCorrespondance(ctx context.Context, in *AuctionInfoMessage, opts ...grpc.CallOption) (*AuctionInfoMessage, error) {
	out := new(AuctionInfoMessage)
	err := c.cc.Invoke(ctx, Database_AskForCorrespondance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations must embed UnimplementedDatabaseServer
// for forward compatibility
type DatabaseServer interface {
	AskForBid(context.Context, *BidMessage) (*AcknowledgementMessage, error)
	AskForResult(context.Context, *emptypb.Empty) (*ResultMessage, error)
	AskForCorrespondance(context.Context, *AuctionInfoMessage) (*AuctionInfoMessage, error)
	mustEmbedUnimplementedDatabaseServer()
}

// UnimplementedDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (UnimplementedDatabaseServer) AskForBid(context.Context, *BidMessage) (*AcknowledgementMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForBid not implemented")
}
func (UnimplementedDatabaseServer) AskForResult(context.Context, *emptypb.Empty) (*ResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForResult not implemented")
}
func (UnimplementedDatabaseServer) AskForCorrespondance(context.Context, *AuctionInfoMessage) (*AuctionInfoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForCorrespondance not implemented")
}
func (UnimplementedDatabaseServer) mustEmbedUnimplementedDatabaseServer() {}

// UnsafeDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServer will
// result in compilation errors.
type UnsafeDatabaseServer interface {
	mustEmbedUnimplementedDatabaseServer()
}

func RegisterDatabaseServer(s grpc.ServiceRegistrar, srv DatabaseServer) {
	s.RegisterService(&Database_ServiceDesc, srv)
}

func _Database_AskForBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).AskForBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_AskForBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).AskForBid(ctx, req.(*BidMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_AskForResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).AskForResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_AskForResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).AskForResult(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_AskForCorrespondance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionInfoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).AskForCorrespondance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_AskForCorrespondance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).AskForCorrespondance(ctx, req.(*AuctionInfoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Database_ServiceDesc is the grpc.ServiceDesc for Database service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Database_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskForBid",
			Handler:    _Database_AskForBid_Handler,
		},
		{
			MethodName: "AskForResult",
			Handler:    _Database_AskForResult_Handler,
		},
		{
			MethodName: "AskForCorrespondance",
			Handler:    _Database_AskForCorrespondance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
